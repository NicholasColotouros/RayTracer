varying vec4 color;

void main() {
	// See Orange Book section 4.3 on built-in uniform variables
	vec3 ecv = vec3( gl_ModelViewMatrix * gl_Vertex );   			  // eye coordinates position
	vec3 ecn = normalize( gl_NormalMatrix * gl_Normal ); 		  	  // eye coordinates normal
	vec3 ecl = vec3( gl_LightSource[0].position ) - ecv; // eye coordinates light vector
	ecl = normalize( ecl );  // would want length for attenuation... not using though!
	color = gl_FrontMaterial.diffuse * max( 0.0, dot( ecn, ecl ) );
	color = color + gl_LightModel.ambient * gl_FrontMaterial.ambient;
	
	//vec3 ech = normalize(ecl + normalize(-ecv));
	vec3 ech = normalize(ecl + vec3(0,0,1));
	
	float val = max(0.0, dot(ecn, ech));	
	color = color + pow( val, gl_FrontMaterial.shininess ) * gl_FrontMaterial.specular;
	
	// for debugging half angle vector:
	color = vec4( ech * 0.5 + vec3(0.5,0.5,0.5), 1.0);
	
	// TODO: this is missing the specular component!
   	gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex; 
}